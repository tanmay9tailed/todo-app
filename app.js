function repeater(e) {
  if (taskName.value == '') {
    h2.innerText = "YOU CAN ENTER AGAIN";
  }
  else
    h2.innerText = `${taskName.value} ${deadline.value}`
}

const h2 = document.querySelector("h2");
const taskName = /**@type{HTMLInputElement} */ (document.querySelector('#task-name'));
const deadline = /**@type{HTMLInputElement} */ (document.querySelector('#deadline'));
const form = document.querySelector('form');
const ul = document.querySelector('#list');

const TODO_LIST_KEY = 'todo-list';

taskName.addEventListener('input', repeater)

form.addEventListener('submit', function (e) {
  e.preventDefault();

  if (!validateTextBox() || !validateDeadline()) {
    return;
  }
  const taskNameValue = taskName.value;
  const deadlineValue = deadline.value;
  const list = readFromLocalStorage(TODO_LIST_KEY);

  list.push({ taskNameValue, deadlineValue, completed: false })

  localStorage.setItem(TODO_LIST_KEY, JSON.stringify(list));

  renderList()

  resetInput(taskName);
  resetInput(deadline);

  repeater();
})

const readFromLocalStorage = (key) => {
  const listFromStorage = localStorage.getItem(key);
  return listFromStorage ? JSON.parse(listFromStorage) : [];
};


function renderList() {
  const list = readFromLocalStorage(TODO_LIST_KEY);
  ul.innerHTML = "";
  list.forEach(({ taskNameValue, deadlineValue, completed }, index) => {
    const li = document.createElement('li');
    li.classList.add('task');
    li.addEventListener('click', onTaskComplete(index))
    const [dateText, time] = formatDateTime(deadlineValue)
    switch (dateText) {
      case 'today':
        console.log('today')
        li.innerHTML = getTaskItemTemplate(index, taskNameValue, `${time} ♦ ${dateText}`, completed, 'yellow');
        break;
      case 'yesterday':
        console.log('y')
        li.innerHTML = getTaskItemTemplate(index, taskNameValue, `${time} ♦ ${dateText}`, completed, 'red');
        break;
      case 'tomorrow':
        console.log('t')
        li.innerHTML = getTaskItemTemplate(index, taskNameValue, `${time} ♦ ${dateText}`, completed, 'green');
        break;
      default:
        li.innerHTML = getTaskItemTemplate(index, taskNameValue, `${time} ♦ ${dateText}`, completed);
    }
    ul.appendChild(li);
  });
}

function onTaskComplete(index) {
  return function () {
    const list = readFromLocalStorage(TODO_LIST_KEY);
    list[index].completed = true;
    localStorage.setItem(TODO_LIST_KEY, JSON.stringify(list));

    renderList();
  }
}

const formatDateTime = (dateTimeString) => {
  const [date, time] = dateTimeString.split('T')

  const dateText = getDateComparison(dateTimeString);

  return [dateText === 'unknown' ? date : dateText, time];
}

const validateTextBox = () => {
  console.log(taskName.value)
  if (taskName.value === '') {
    setErrorToInput(taskName);
    return false;
  }

  return true;
}

const validateDeadline = () => {
  console.log(deadline.value)
  if (!deadline.value) {
    setErrorToInput(deadline);
    return false;
  }

  return true;
}

const setErrorToInput = (element) => {
  element.classList.add('error')
}

const resetInput = (element) => {
  element.value = ''
  element.classList.remove('error')
}

const getTaskItemTemplate = (index, taskName, deadline, completed, background = '') =>
  `<div data-index-number="${index}" class="list-item ${background}"><span class="task-name ${completed ? 'strike' : ''}">${taskName}</span><span>${deadline} <button onclick="removeTask(event)" class="remove-task">x</button></span></div>`;

function removeTask(e) {
  e.stopPropagation();
  const item = e.target.closest("div.list-item");
  const index = item.dataset.indexNumber;
  
  // Add the 'hide' class to start the animation
  item.classList.add('hide');

  // Wait for the transition to complete (500ms) before removing the item
  setTimeout(() => {
    const list = readFromLocalStorage(TODO_LIST_KEY);
    list.splice(index, 1)
    localStorage.setItem(TODO_LIST_KEY, JSON.stringify(list));
    renderList();
  }, 500);
}


// Function generated by ChatGPT
function getDateComparison(dateInput) {
  const today = new Date();
  const inputDate = new Date(dateInput);

  // Set hours, minutes, seconds, and milliseconds to 0 for both dates
  today.setHours(0, 0, 0, 0);
  inputDate.setHours(0, 0, 0, 0);

  const timeDiff = inputDate.getTime() - today.getTime();
  const oneDayInMilliseconds = 24 * 60 * 60 * 1000;

  if (timeDiff === 0) {
    return "today";
  } else if (timeDiff === oneDayInMilliseconds) {
    return "tomorrow";
  } else if (timeDiff === -oneDayInMilliseconds) {
    return "yesterday";
  } else {
    return "unknown"; // Date is not today, tomorrow, or yesterday
  }
}

renderList();